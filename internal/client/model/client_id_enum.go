// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"strings"
)

const (
	IDQBittorrent  ID = "QBittorrent"
	IDTransmission ID = "Transmission"
	IDNtfy         ID = "Ntfy"
)

var ErrInvalidID = fmt.Errorf("not a valid ID, try [%s]", strings.Join(_IDNames, ", "))

var _IDNames = []string{
	string(IDQBittorrent),
	string(IDTransmission),
	string(IDNtfy),
}

// IDNames returns a list of possible string values of ID.
func IDNames() []string {
	tmp := make([]string, len(_IDNames))
	copy(tmp, _IDNames)
	return tmp
}

// IDValues returns a list of the values for ID
func IDValues() []ID {
	return []ID{
		IDQBittorrent,
		IDTransmission,
		IDNtfy,
	}
}

// String implements the Stringer interface.
func (x ID) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ID) IsValid() bool {
	_, err := ParseID(string(x))
	return err == nil
}

var _IDValue = map[string]ID{
	"QBittorrent":  IDQBittorrent,
	"Transmission": IDTransmission,
	"Ntfy":         IDNtfy,
}

// ParseID attempts to convert a string to a ID.
func ParseID(name string) (ID, error) {
	if x, ok := _IDValue[name]; ok {
		return x, nil
	}
	return ID(""), fmt.Errorf("%s is %w", name, ErrInvalidID)
}

// MarshalText implements the text marshaller method.
func (x ID) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ID) UnmarshalText(text []byte) error {
	tmp, err := ParseID(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errIDNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *ID) Scan(value interface{}) (err error) {
	if value == nil {
		*x = ID("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseID(v)
	case []byte:
		*x, err = ParseID(string(v))
	case ID:
		*x = v
	case *ID:
		if v == nil {
			return errIDNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errIDNilPtr
		}
		*x, err = ParseID(*v)
	default:
		return errors.New("invalid type for ID")
	}

	return
}

// Value implements the driver Valuer interface.
func (x ID) Value() (driver.Value, error) {
	return x.String(), nil
}

type NullID struct {
	ID    ID
	Valid bool
	Set   bool
}

func NewNullID(val interface{}) (x NullID) {
	err := x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	_ = err            // make any errcheck linters happy
	return
}

// Scan implements the Scanner interface.
func (x *NullID) Scan(value interface{}) (err error) {
	if value == nil {
		x.ID, x.Valid = ID(""), false
		return
	}

	err = x.ID.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullID) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.ID.String(), nil
}

// MarshalJSON correctly serializes a NullID to JSON.
func (n NullID) MarshalJSON() ([]byte, error) {
	const nullStr = "null"
	if n.Valid {
		return json.Marshal(n.ID)
	}
	return []byte(nullStr), nil
}

// UnmarshalJSON correctly deserializes a NullID from JSON.
func (n *NullID) UnmarshalJSON(b []byte) error {
	n.Set = true
	var x interface{}
	err := json.Unmarshal(b, &x)
	if err != nil {
		return err
	}
	err = n.Scan(x)
	return err
}
